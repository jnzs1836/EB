create user owner@localhost identified with mysql_native_password by "123456";
grant all privileges on *.* to owner@localhost;
flush privileges; 
以上为pymysql支持的用户格式

create database EB;

create table user(
	user_name varchar(20) primary key,
	user_password varchar(40) not null,
	telephone varchar(15) not null,
	user_type char(1) not null,
	start_time datetime,
	day_left int	
);
账号表格，user_type是"L"或者"H"
密码以md5储存

DELIMITER $
create trigger user_limit before insert
on user for each row
begin
if new.user_type not in ("L", "H")
then signal sqlstate '45000';
end if;
end $
DELIMITER ;
建立user_type的触发器

create table login_log(
	user_name varchar(20),
	date datetime not null,
	state char(1) not null,
	foreign key (user_name) references user(user_name)
);
登录日志，状态为"S"或者"F"

DELIMITER $
create trigger login_log_limit before insert
on login_log for each row
begin
if new.state not in ("S", "F")
then signal sqlstate '45000';
end if;
end $
DELIMITER ;
登录日志的触发器

create table vip_log(
	user_name varchar(20),
	start_time date not null,
	duration int not null,
	foreign key (user_name) references user(user_name)
);
账号充值的日志
duration以月为单位，30天。




create table stock_set(
    stock_id char(10),
    stock_name char(20) not null,
    primary key(stock_id)
);


create table today_stock(
	stock_id char(10),
	stock_name char(20) not null,
	price decimal(5,2) not null,
	date datetime not null,
	foreign key (stock_id) references stock_set(stock_id)
);
今日股票价格

create table previous_stock(
	stock_id char(10),
	stock_name char(20) not null,
	start_price decimal(5,2) not null, 
	end_price decimal(5,2) not null,   
	max_price decimal(5,2) not null, 
	min_price decimal(5,2) not null, 
	date datetime not null,
	foreign key (stock_id) references stock_set(stock_id)
);
历史股票价格


create table notice(
    stock_id char(10),
    stock_notice varchar(10000)
);
公告


####################################################################
和交易客户端交互

# POST请求  路由为/stock
# 发送的json包格式
{
	"code": "123",
	"name": "ABC"
}

# 返回的json包格式
{
	"latest_price": "", # 最新成交价格
	"buy_highest_price": "",  # 当前购买指令的最高价格
	"sale_lowest_price": "", # 当前出售的最低价格
	"today_price": { # 当日最高，最低成交价格
		"highest_price":"",
		"lowest_price":"",
	},
	"week_price": { # 本周最高，最低成交价格
		"highest_price":"",
		"lowest_price":"",
	},
	"month_price": { # 本月最高，最低成交价格
		"highest_price":"",
		"lowest_price":"",
	},
	"stock_info":"", # 股票的重要公告
	"current_price":"", # 实时的价格
}

####################################################################
和中央交易系统间的交互
//获得 最新成交价格 和 当前购买指令的最高价格 和 当前出售的最低价格
def get_stock_info(stock_id):
	dic = {
	        "latest_price":"",
	        "buy_highest_price":"",
	        "sale_lowest_price":""
	      }
	return dic
